# Example: Pair-end reads
rule bismark_pe:
    input:
        fq_1="reads/{sample}.1.fastq",
        fq_2="reads/{sample}.2.fastq",
        genome="resources/{genome}/{genome}.fa",
        bismark_indexes_dir="resources/{genome}/",
    output:
        bam="results/bismark/{sample}_{genome}_pe.bam",
        report="results/bismark/{sample}_{genome}_PE_report.txt",
        fq_unmapped_1="results/bismark/{sample}_{genome}_unmapped_reads_1.fq.gz",  # optional: implicitly activates --unmapped
        fq_unmapped_2="results/bismark/{sample}_{genome}_unmapped_reads_2.fq.gz",  # optional: implicitly activates --unmapped
        fq_ambiguous_1="results/bismark/{sample}_{genome}_ambiguous_reads_1.fq.gz",  # optional: implicitly activates --ambiguous
        fq_ambiguous_2="results/bismark/{sample}_{genome}_ambiguous_reads_2.fq.gz",  # optional: implicitly activates --ambiguous
    log:
        "logs/bismark/{sample}_{genome}.log",
    params:
        # optional params string, e.g: -L32 -N0 -X400 --gzip
        # Useful options to tune:
        # (for bowtie2)
        # -N: The maximum number of mismatches permitted in the "seed", i.e. the first L base pairs
        # of the read (deafault: 1)
        # -L: The "seed length" (deafault: 28)
        # -I: The minimum insert size for valid paired-end alignments. ~ min fragment size filter (for
        # PE reads)
        # -X: The maximum insert size for valid paired-end alignments. ~ max fragment size filter (for
        # PE reads)
        # --gzip: Gzip intermediate fastq files
        # --ambiguous --unmapped
        # -p: bowtie2 parallel execution
        # --multicore: bismark parallel execution
        # --temp_dir: tmp dir for intermediate files instead of output directory
        extra="",
        basename="{sample}_{genome}",
    threads: 4  # bismark in pe mode will run parallel with a minimum of 4 threads, no matter what - please ensure your workflow provides at least --cores 4
    wrapper:
        "master/bio/bismark/bismark"


# Example: Single-end reads
rule bismark_se:
    input:
        fq="reads/{sample}.fq.gz",
        genome="resources/{genome}/{genome}.fa",
        bismark_indexes_dir="resources/{genome}/",
        genomic_freq="resources/{genome}/genomic_nucleotide_frequencies.txt",  # only required for nucleotide_stats output, to avoid race conditions; generate with bam2nuc wrapper
    output:
        cram="results/bismark/{sample}_{genome}.cram",
        report="results/bismark/{sample}_{genome}_SE_report.txt",
        nucleotide_stats="results/bismark/{sample}_{genome}.nucleotide_stats.txt",  # optional: implicitly activates --nucleotide_coverage
        fq_unmapped="results/bismark/{sample}_{genome}_unmapped_reads.fq.gz",  # optional: implicitly activates --unmapped
        fq_ambiguous="results/bismark/{sample}_{genome}_ambiguous_reads.fq.gz",  # optional: implicitly activates --ambiguous
        bam_ambiguous="results/bismark/{sample}_{genome}_ambiguous_reads.bam",  # optional: implicitly activates --ambig_bam
    log:
        "logs/bismark/{sample}_{genome}.log",
    params:
        extra="",
    threads: 2  # bismark in se mode will run parallel with a minimum of 2 threads, no matter what - please ensure your workflow provides at least --cores 2
    wrapper:
        "master/bio/bismark/bismark"
